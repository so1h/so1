#
# MKFILE0
# =======
# establece las macros: CC, AS, LINKER, CFLAGS, AFLAGS, OPCIONES_L y OPCIONES_LR
#
# ajuste posible del ensamblador: AS = TASM32 o AS = JWASM

!include "\SO\MKF0"

# UTMP letra de la unidad temporal %TMP%\-so-
# UUSB letra de la unidad usb

# (Para compilar SO1 rapidamente COMPILACIONDIRECTA = 1)
# (Para compilar LMLDR COMPILACIONDIRECTA = 0)

COMPILACIONDIRECTA = 1   
#COMPILACIONDIRECTA = 0   
  
IDE = 

# IDE no definido indica que estamos trabajando sin un IDE, es decir compilamos
# utilizando la herramienta MAKE
#
# IDE=BC5       en el proyecto so1.ide (Borland C++ 5.02)
# IDE=CODEBLOCK en el proyecto SO1.cbp (Codeblcck) y workspace SO1.workspace

# Cuando insertamos código ensamblador en linea con asm { ... } ese código
# puede ser ensamblado de tres maneras: con BASM, con TASM o con JWASM.
#
# Se utiliza BASM cuando hacemos la compilacion directamente con bcc de
# un fichero .C a .OBJ, lo que sucede normalmente cuando la compilacion se   
# desde un IDE o cuando desde el make exigimos la compilacion directa 
# no poniendo la opcion -S de bcc. La ventaja en este caso es la rapidez al 
# ahorrarnos la fase de ensamblado. El inconveniente es que el ensamblador  
# BASM es muy restrictivo en comparacion con TASM y JWASM, admitiendose menos  
# modos de direccionamiento, directivas, simbolos y etiquetas. 
# BASM es distinto en el caso de bcc 5.02 y 5.01. Por ejemplo el BASM de
# bcc version 5.02 no permite la directiva DB 'Hola', pero el BASM de bcc 5.01 si.
#
# Para utilizar TASM o JWASM primero tenemos que compilar con bcc y la opcion
# -S para compilar el fichero .C y generar el .ASM. Luego llamamos al compilador
# correspondiente TASM o JWASM. 

#AS = TASM32
AS = JWASM
#AS = BASM502
#AS = BASM501
#AS = NASM

#.autodepend

CFLAGS_0 = -1 -k- -r- -c -v- -y- -g20 -j20 

#  CFLAGS_AS => se compila generando solo el fichero en AS,
#               dejando para luego su ensamblaje (mas otra informacion)
#BCC 5.02
#COMPILADOR CC = $(UTMP):\PRGTOOLS\EMB16\BCC.EXE 
CC          = BCC 
#COMPILADOR CC = $(UTMP):\SMALLERC\V0100\BINW\SMLRCC.EXE 
#CC          = SMLRCC 
# CFLAGS    se utiliza para compilar directamente a OBJ
# CFLAGS_AS se utiliza para compilar a ensamblador
!if $(AS) == TASM32
#CFLAGS      = $(CFLAGS_0) -I$(UUSB):\SO\BC5\INCLUDE -I$(UUSB):\SO\PRACT0 -a1 -DTASM32
CFLAGS      = $(CFLAGS_0) -I$(UTMP):\BC5\INCLUDE -I$(UUSB):\SO\PRACT0 -a1 -DTASM32
!elif $(AS) == JWASM
#CFLAGS      = $(CFLAGS_0) -I$(UUSB):\SO\BC5\INCLUDE -I$(UUSB):\SO\PRACT0 -a1 -DJWASM
CFLAGS      = $(CFLAGS_0) -I$(UTMP):\BC5\INCLUDE -I$(UUSB):\SO\PRACT0 -a1 -DJWASM
!elif $(AS) == NASM
CFLAGS      = -S -flat16
#CFLAGS     = -S -huge
!else
!message 
!error la macro AS tiene un valor distinto de TASM32, JWASM, BASM502 y BASM501
!message 
!endif

#por defecto la compilación es con el modelo small (opcion -ms, -mt para tiny) 
#el modelo tiny es util a veces para programar bootloaders, bootsectors o mbrs
#si se compila generando ensamblador (-S) no tiene sentido poner -ms o -mt
#habria que indicar el modelo mediante un asm incluyendo la directiva .model 
CFLAGS_AS   = $(CFLAGS) -S   

#CFLAGS_DIR = $(CFLAGS_0) -I$(UUSB):\SO\BC5\INCLUDE -I$(UUSB):\SO\PRACT0 -a1 -DBASM502
CFLAGS_DIR = $(CFLAGS_0) -I$(UTMP):\BC5\INCLUDE -I$(UUSB):\SO\PRACT0 -a1 -DBASM502

!if $(AS) == TASM32
#ENSAMBLADOR AS = $(UTMP):\PRGTOOLS\EMB32\TASM32.EXE
AFLAGS      = /la /c /ml /zn 
!elif $(AS) == JWASM
#ENSAMBLADOR AS = $(UTMP):\PRGTOOLS\JWASM\JWASM.EXE
AFLAGS      = -Zi0 -Zm -q -D??version=0504 -D?debug=; -e20
!elif $(AS) == NASM
AFLAGS      = 
!else
!message 
!error la macro AS tiene un valor distinto de TASM32 y de JWASM
!message 
!endif

#LINKER     = $(UTMP):\PRGTOOLS\JWLINK\JWLINK.EXE
LINKER      = JWLINK
OPCIONES_L  = format dos op v, start=_startExe, map, quiet, stack = 0xFFFE disable 1014 file 
OPCIONES_LR = format dos output raw offset=0x0000 op v, start=_startBin, map, quiet, stack = 0xFFFE disable 1014 file 
			  
#EXE2BIN    = $(UTMP):\PRGTOOLS\BIN\EXE2BIN.EXE
#EXTENDER   = $(UTMP):\PRGTOOLS\BIN\EXTENDER.EXE
#EXTRAER    = $(UTMP):\PRGTOOLS\BIN\EXTRAER.EXE
#PARCHEAR   = $(UTMP):\PRGTOOLS\BIN\PARCHEAR.EXE
#RELLENAR   = $(UTMP):\PRGTOOLS\BIN\RELLENAR.EXE
#SETSR      = $(UTMP):\PRGTOOLS\BIN\SETSR.EXE
#SPINIC     = $(UTMP):\PRGTOOLS\BIN\SPINIC.EXE