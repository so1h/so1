JWasm v2.12pre, Nov 27 2013
mbr.asm
                                	.286
                                	ifndef	??version
                                	else
                                $comm	macro	name,dist,size,count
 >                              	comm	dist name[size]:BYTE:count
 >                              	endm
                                	endif
00000000                        _TEXT	segment byte public 'CODE'
                                _TEXT	ends
                                DGROUP	group	_DATA,_BSS
                                	assume	cs:_TEXT,ds:DGROUP
00000000                        _DATA	segment word public 'DATA'
00000000                        d@	label	byte
00000000                        d@w	label	word
00000000                        _DATA	ends
00000000                        _BSS	segment word public 'BSS'
00000000                        b@	label	byte
00000000                        b@w	label	word
00000000                        _BSS	ends
00000000                        _TEXT	segment byte public 'CODE'
                                	assume	cs:_TEXT,ds:DGROUP
00000000                        _startBin	proc	near
                                   ;	
                                   ;	void startBin ( void ) {            /* punto de entrada del programa (MBR) */
                                   ;	
                                   ;	
                                   ;	  asm {
                                   ;	//  cli ;             /* inhibimos las interrupciones (ya estan inhibidas) */
                                   ;	    mov ax,dirLinealCargaMBR SHR 4 ;                          /* CS = 0000 */
                                   ;	
00000000  B8C007                	mov	 ax,07C00H SHR 4 
                                   ;	
                                   ;	    mov ds,ax ;                                               /* DS = 07C0 */
                                   ;	
00000003  8ED8                  	mov	 ds,ax 
                                   ;	
                                   ;	    mov ax,0x9000
                                   ;	
00000005  B80090                	mov	 ax,09000H
                                   ;	
                                   ;	    mov ss,ax ;                                               /* SS = 9000 */
                                   ;	
00000008  8ED0                  	mov	 ss,ax 
                                   ;	
                                   ;	    mov sp,ax ;              /* establecemos la pila SS:SP = 0x9000:0x9000 */
                                   ;	
0000000A  8BE0                  	mov	 sp,ax 
                                   ;	
                                   ;	  }
                                   ;	  saltarA(ds, OFFSET main) ;      /* se cede el control a main (07C0:main) */
                                   ;	
0000000C  1E                     	push	 ds 
0000000D  68CD00                 	push	 OFFSET _main 
00000010  CB                     	retf	 
                                   ;	
                                   ;	}
                                   ;	
00000011                        	ret	
00000012                        _startBin	endp
                                	assume	cs:_TEXT,ds:DGROUP
00000012                        _printCar	proc	near
                                   ;	
                                   ;	void printCar ( char car ) {  asm {
                                   ;	
00000012  55                    	push	bp
00000013  8BEC                  	mov	bp,sp
                                   ;	
                                   ;	    mov al,car ;     /* car -> caracter a escribir                         */
                                   ;	
00000015  8A4604                	mov	 al,[bp+4] 
                                   ;	
                                   ;	    mov bl,0x07 ;    /* 0x07 -> atributo normal                            */
                                   ;	
00000018  B307                  	mov	 bl,007H 
                                   ;	
                                   ;	    mov ah,0x0e ;    /* 0x0e -> escribir caracter                          */
                                   ;	
0000001A  B40E                  	mov	 ah,00eH 
                                   ;	
                                   ;	    int 0x10 ;       /* 0x10 -> servicios BIOS de manejo de la pantalla    */
                                   ;	
0000001C  CD10                  	int	 010H 
                                   ;	
                                   ;	  }
                                   ;	}
                                   ;	
0000001E  5D                    	pop	bp
0000001F                        	ret	
00000020                        _printCar	endp
00000020                        _TEXT	ends
00000000                        _DATA	segment word public 'DATA'
00000000                         	_DATA	 ENDS 
00000020                         	_TEXT	 SEGMENT BYTE PUBLIC 'CODE' 
                                 	ASSUME	 CS:_TEXT,DS:DGROUP 
00000020                         	_msg	 PROC NEAR 
00000020  0A0D4D425220502E50    	db	 0ah, 0dh, 'MBR P.P.L.R. (C) 2016', 0ah, 0dh, 0 
0000003A                         	_msg	 ENDP 
0000003A                         	_TEXT	 ENDS 
                                 	public	 _msg 
00000000                         	_DATA	 SEGMENT WORD PUBLIC 'DATA' 
00000000                         	_DATA	 ENDS 
0000003A                         	_TEXT	 SEGMENT BYTE PUBLIC 'CODE' 
                                 	ASSUME	 CS:_TEXT,DS:DGROUP 
0000003A                         	_msg_Load	 PROC NEAR 
0000003A  0A0D4C6F6164696E67    	db	 0ah, 0dh, 'Loading PBR ...', 0ah, 0dh, 0 
0000004E                         	_msg_Load	 ENDP 
0000004E                         	_TEXT	 ENDS 
                                 	public	 _msg_Load 
00000000                         	_DATA	 SEGMENT WORD PUBLIC 'DATA' 
00000000                         	_DATA	 ENDS 
0000004E                         	_TEXT	 SEGMENT BYTE PUBLIC 'CODE' 
                                 	ASSUME	 CS:_TEXT,DS:DGROUP 
0000004E                         	_msg_ReadError	 PROC NEAR 
0000004E  0A0D450A0A0D00        	db	 0ah, 0dh, 'E', 0ah,  0ah, 0dh, 0 
00000055                         	_msg_ReadError	 ENDP 
00000055                         	_TEXT	 ENDS 
                                 	public	 _msg_ReadError 
00000000                         	_DATA	 SEGMENT WORD PUBLIC 'DATA' 
00000000                         	_DATA	 ENDS 
00000055                         	_TEXT	 SEGMENT BYTE PUBLIC 'CODE' 
                                 	ASSUME	 CS:_TEXT,DS:DGROUP 
00000055                         	_msg_NoPartition	 PROC NEAR 
00000055  0A0D4E6F2041205020    	db	 0ah, 0dh, 'No A P Found', 0ah,  0ah, 0dh, 0 
00000067                         	_msg_NoPartition	 ENDP 
00000067                         	_TEXT	 ENDS 
                                 	public	 _msg_NoPartition 
00000000                         	_DATA	 SEGMENT WORD PUBLIC 'DATA' 
00000000                         	_DATA	 ENDS 
00000067                         	_TEXT	 SEGMENT BYTE PUBLIC 'CODE' 
                                 	ASSUME	 CS:_TEXT,DS:DGROUP 
00000067                         	_msg_PartitionError	 PROC NEAR 
00000067  0A0D5054204572726F    	db	 0ah, 0dh, 'PT Error', 0ah,  0ah, 0dh, 0 
00000075                         	_msg_PartitionError	 ENDP 
00000075                         	_TEXT	 ENDS 
                                 	public	 _msg_PartitionError 
00000000                         	_DATA	 SEGMENT WORD PUBLIC 'DATA' 
00000000                        _DATA	ends
00000075                        _TEXT	segment byte public 'CODE'
                                	assume	cs:_TEXT,ds:DGROUP
00000075                        _printStr	proc	near
                                   ;	
                                   ;	void printStr ( char * str ) {
                                   ;	
00000075  55                    	push	bp
00000076  8BEC                  	mov	bp,sp
00000078  EB15                  	jmp	short @3@5
0000007A                        @3@2:
                                   ;	
                                   ;	  while ((car = *str++) != (char)0) {
                                   ;	    if (car == '\n')                  /* '\n' caracter de avance de linea  */
                                   ;	
0000007A  803E11020A            	cmp	byte ptr DGROUP:_car,10
0000007F  7506                  	jne	short @3@4
                                   ;	
                                   ;	      printCar('\r') ;                /* '\r' caracter de retorno de carro */
                                   ;	
00000081  6A0D                  	push	13
00000083  E88CFF                	call	near ptr _printCar
00000086  59                    	pop	cx
00000087                        @3@4:
                                   ;	
                                   ;	    printCar(car) ;
                                   ;	
00000087  A01102                	mov	al,byte ptr DGROUP:_car
0000008A  50                    	push	ax
0000008B  E884FF                	call	near ptr _printCar
0000008E  59                    	pop	cx
0000008F                        @3@5:
0000008F  8B5E04                	mov	bx,word ptr [bp+4]
00000092  FF4604                	inc	word ptr [bp+4]
00000095  8A07                  	mov	al,byte ptr [bx]
00000097  A21102                	mov	byte ptr DGROUP:_car,al
0000009A  0AC0                  	or	al,al
0000009C  75DC                  	jne	short @3@2
                                   ;	
                                   ;	  }
                                   ;	}
                                   ;	
0000009E  5D                    	pop	bp
0000009F                        	ret	
000000A0                        _printStr	endp
                                	assume	cs:_TEXT,ds:DGROUP
000000A0                        _leerTecla	proc	near
                                   ;	
                                   ;	char leerTecla ( void ) {
                                   ;	
                                   ;	
                                   ;	//static char car ;               /* consume menos bytes del MBR asi (BSS) */
                                   ;	  asm {
                                   ;	    mov ah,0x00 ;        /* 0x00 -> leer siguiente tecla pulsada           */
                                   ;	
000000A0  B400                  	mov	 ah,000H 
                                   ;	
                                   ;	    int 0x16 ;           /* 0x16 -> servicios BIOS de teclado              */
                                   ;	
000000A2  CD16                  	int	 016H 
                                   ;	
                                   ;	//  mov car,al ;         /* El caracter ascii se nos devuelve en AL        */
                                   ;	  }
                                   ;	//return(car) ;
                                   ;	  return(_AL) ;
                                   ;	
                                   ;	
                                   ;	}
                                   ;	
000000A4                        	ret	
000000A5                        _leerTecla	endp
                                	assume	cs:_TEXT,ds:DGROUP
000000A5                        _resetController	proc	near
                                   ;	
                                   ;	int resetController ( void ) {
                                   ;	
                                   ;	
                                   ;	  asm {
                                   ;	    mov ah,0x00 ;       /* 0x00 -> reset del controlador                   */
                                   ;	
000000A5  B400                  	mov	 ah,000H 
                                   ;	
                                   ;	    int 0x13 ;          /* BIOS: E/S de disco                              */
                                   ;	
000000A7  CD13                  	int	 013H 
                                   ;	
                                   ;	    jc resetError ;     /* el flag de acarreo C se activa en caso de error */
                                   ;	
000000A9  7203                  	jc	short @5@4
                                   ;	
                                   ;	  }
                                   ;	  return(0) ;
                                   ;	
000000AB  33C0                  	xor	ax,ax
000000AD                        	ret	
000000AE                        @5@4:
                                   ;	
                                   ;	resetError:
                                   ;	  return(1) ;
                                   ;	
000000AE  B80100                	mov	ax,1
                                   ;	
                                   ;	}
                                   ;	
000000B1                        	ret	
000000B2                        _resetController	endp
                                	assume	cs:_TEXT,ds:DGROUP
000000B2                        _leerPrimerSectorF	proc	near
                                   ;	
                                   ;	int leerPrimerSectorF ( void ) {
                                   ;	
                                   ;	
                                   ;	
                                   ;	//cabeza   = cabezaInicial ;
                                   ;	//sector   = sectorInicial ;
                                   ;	//cilindro = cilindroInicial ;
                                   ;	
                                   ;	//sc = *((word_t *)&sectorInicial) ;                    /* sector+cilindro */
                                   ;	                                                            /* codificados */
                                   ;	  asm {
                                   ;	    les bx,dirCarga ;              /* pone en ES:BX la direccion del bufer */
                                   ;	
000000B2  C41E1202              	les	 bx,DGROUP:_dirCarga 
                                   ;	
                                   ;	//  mov dl,unidadBIOS ;           /* numero de unidad indicado por el BIOS */
                                   ;	    mov dh,cabezaInicial ;                                       /* cabeza */
                                   ;	
000000B6  8A360102              	mov	 dh,DGROUP:_cabezaInicial 
                                   ;	
                                   ;	//  mov cx,sc ;                            /* codificacion sector/cilindro */
                                   ;	    mov cx,scInicial ;                     /* codificacion sector/cilindro */
                                   ;	
000000BA  8B0E0202              	mov	 cx,DGROUP:_scInicial 
                                   ;	
                                   ;	    mov al,1 ;                                /* numero de sectores a leer */
                                   ;	
000000BE  B001                  	mov	 al,1 
                                   ;	
                                   ;	    mov ah,0x02 ;                          /* 0x02 -> lectura de un sector */
                                   ;	
000000C0  B402                  	mov	 ah,002H 
                                   ;	
                                   ;	    int 0x13 ;                                       /* BIOS: E/S de disco */
                                   ;	
000000C2  CD13                  	int	 013H 
                                   ;	
                                   ;	    jc errorAlLeer ;    /* el flag de acarreo C se activa en caso de error */
                                   ;	
000000C4  7203                  	jc	short @6@8
                                   ;	
                                   ;	  }
                                   ;	  return(0) ;
                                   ;	
000000C6  33C0                  	xor	ax,ax
000000C8                        	ret	
000000C9                        @6@8:
                                   ;	
                                   ;	errorAlLeer:
                                   ;	  return(1) ;
                                   ;	
000000C9  B80100                	mov	ax,1
                                   ;	
                                   ;	}
                                   ;	
000000CC                        	ret	
000000CD                        _leerPrimerSectorF	endp
                                	assume	cs:_TEXT,ds:DGROUP
000000CD                        _main	proc	near
                                   ;	
                                   ;	void main ( void ) {                                    /* CS = DS = 0x7C0 */
                                   ;	
                                   ;	
                                   ;	
                                   ;	  origen  = (byte_t *)0x0000 ;                        /* 0x07C0:0 = 0x7C00 */
                                   ;	
000000CD  C70616020000          	mov	word ptr DGROUP:_origen,0
                                   ;	
                                   ;	  destinoLejano = (pointer_t)MK_FP(_SS,0x0000) ;     /* 0x9000:0 = 0x90000 */
                                   ;	
000000D3  8C161A02              	mov	word ptr DGROUP:_destinoLejano+2,ss
000000D7  C70618020000          	mov	word ptr DGROUP:_destinoLejano,0
                                   ;	
                                   ;	
                                   ;	  for ( i = 0 ; i < tamMBR ; i++ )      /* reubicacion del mbr a 9000:0000 */
                                   ;	
000000DD  C70620020000          	mov	word ptr DGROUP:_i,0
000000E3  EB19                  	jmp	short @7@3
000000E5                        @7@1:
                                   ;	
                                   ;	    *destinoLejano++ = *origen++ ;
                                   ;	
000000E5  8B1E1602              	mov	bx,word ptr DGROUP:_origen
000000E9  8A07                  	mov	al,byte ptr [bx]
000000EB  C41E1802              	les	bx,dword ptr DGROUP:_destinoLejano
000000EF  268807                	mov	byte ptr es:[bx],al
000000F2  FF061602              	inc	word ptr DGROUP:_origen
000000F6  FF061802              	inc	word ptr DGROUP:_destinoLejano
000000FA  FF062002              	inc	word ptr DGROUP:_i
000000FE                        @7@3:
000000FE  813E20020002          	cmp	word ptr DGROUP:_i,512
00000104  7CDF                  	jl	short @7@1
                                   ;	
                                   ;	
                                   ;	  saltarA(ss, OFFSET reubicado) ;      /* Cedemos el control al sector de */
                                   ;	
00000106  16                     	push	 ss 
00000107  680C01                 	push	 OFFSET _reubicado 
0000010A  CB                     	retf	 
                                   ;	
                                   ;	                               /* arranque reubicado en el segmento 0x0060 */
                                   ;	}
                                   ;	
0000010B                        	ret	
0000010C                        _main	endp
                                	assume	cs:_TEXT,ds:DGROUP
0000010C                        _reubicado	proc	near
                                   ;	
                                   ;	void reubicado ( void ) {                 /* CS = SS = 0x9000, DS = 0x7C00 */
                                   ;	
                                   ;	
                                   ;	
                                   ;	  asm {
                                   ;	    push ss ;
                                   ;	
0000010C  16                    	push	 ss 
                                   ;	
                                   ;	    pop ds ;
                                   ;	
0000010D  1F                    	pop	 ds 
                                   ;	
                                   ;	  }                                               /* CS = DS = SS = 0x9000 */
                                   ;	
                                   ;	  setVideoMode() ;
                                   ;	
0000010E  B80300                 	mov	 ax, 00003H 
00000111  CD10                   	int	 010H 
                                   ;	
                                   ;	
                                   ;	//printStr((char *)msg) ;
                                   ;	  printStrMacro(msg) ;
                                   ;	
00000113  682000                 	push	 offset _msg 
00000116  E85CFF                 	call	 near ptr _printStr 
00000119  59                     	pop	 cx 
                                   ;	
                                   ;	//leerTecla() ;
                                   ;	
                                   ;	//asm mov unidadBIOS,dl ;                    /* guardamos dl en unidadBIOS */
                                   ;	
                                   ;	  origenDesc = (byte_t *)&descParticion ;
                                   ;	
0000011A  C7061C02BE01          	mov	word ptr DGROUP:_origenDesc,offset DGROUP:_descParticion
                                   ;	
                                   ;	
                                   ;	  for ( i = 0 ; i < 4 ; i++ ) {
                                   ;	
00000120  C70620020000          	mov	word ptr DGROUP:_i,0
00000126  EB75                  	jmp	@8@31
00000128                        @8@8:
                                   ;	
                                   ;	
                                   ;	    destinoDesc = (byte_t *)&activa ;
                                   ;	
00000128  C7061E020002          	mov	word ptr DGROUP:_destinoDesc,offset DGROUP:_activa
                                   ;	
                                   ;	    for ( j = 0 ; j < sizeof(descParticion_t) ; j++ )
                                   ;	
0000012E  C70622020000          	mov	word ptr DGROUP:_j,0
00000134  EB18                  	jmp	short @8@11
00000136                        @8@9:
                                   ;	
                                   ;	      *destinoDesc++ = *origenDesc++ ;
                                   ;	
00000136  8B1E1C02              	mov	bx,word ptr DGROUP:_origenDesc
0000013A  8A07                  	mov	al,byte ptr [bx]
0000013C  8B1E1E02              	mov	bx,word ptr DGROUP:_destinoDesc
00000140  8807                  	mov	byte ptr [bx],al
00000142  FF061C02              	inc	word ptr DGROUP:_origenDesc
00000146  FF061E02              	inc	word ptr DGROUP:_destinoDesc
0000014A  FF062202              	inc	word ptr DGROUP:_j
0000014E                        @8@11:
0000014E  833E220210            	cmp	word ptr DGROUP:_j,16
00000153  7CE1                  	jl	short @8@9
                                   ;	
                                   ;	
                                   ;	    if (activa == 0x80) {
                                   ;	
00000155  803E000280            	cmp	byte ptr DGROUP:_activa,128
0000015A  752D                  	jne	short @8@25
                                   ;	
                                   ;	//    printStr((char *)msg_Load) ;
                                   ;	      printStrMacro(msg_Load) ;
                                   ;	
0000015C  683A00                 	push	 offset _msg_Load 
0000015F  E813FF                 	call	 near ptr _printStr 
00000162  59                     	pop	 cx 
                                   ;	
                                   ;	//    leerTecla() ;
                                   ;	      resetController() ;                /* Hacer un reset del controlador */
                                   ;	
00000163  E83FFF                	call	near ptr _resetController
                                   ;	
                                   ;	//    leerPrimerSector(unidadBIOS, MK_FP(0x0000, 0x7C00)) ;    /* leer PBR */
                                   ;	      dirCarga = MK_FP(0x0000, 0x7C00) ;
                                   ;	
00000166  C70614020000          	mov	word ptr DGROUP:_dirCarga+2,0
0000016C  C7061202007C          	mov	word ptr DGROUP:_dirCarga,31744
                                   ;	
                                   ;	      if (leerPrimerSector(i, _DL, dirCarga)) {
                                   ;	
00000172  E83DFF                	call	near ptr _leerPrimerSectorF
00000175  0BC0                  	or	ax,ax
00000177  7409                  	je	short @8@21
                                   ;	
                                   ;	//      printStr((char *)msg_ReadError) ;
                                   ;	        printStrMacro(msg_ReadError) ;
                                   ;	
00000179  684E00                 	push	 offset _msg_ReadError 
0000017C  E8F6FE                 	call	 near ptr _printStr 
0000017F  59                     	pop	 cx 
                                   ;	
                                   ;	        goto fin ;
                                   ;	
00000180  EB2B                  	jmp	short @8@35
00000182                        @8@21:
                                   ;	
                                   ;	      }
                                   ;	//    asm mov dl,unidadBIOS ;           /* pasamos la unidad al PBR en DL. */
                                   ;	                                        /* Se cede el control al sector de */
                                   ;	                                        /* arranque de la particion activa */
                                   ;	                                        /* cargado en 0000:7C00 = 0x7C00   */
                                   ;	//    asm xor ax,ax ;
                                   ;	//    asm mov ds,ax ;
                                   ;	//    asm mov ss,ax ;
                                   ;	//    asm mov sp,ax ;
                                   ;	
                                   ;	      saltarA(ax, 0x7C00) ;
                                   ;	
00000182  50                     	push	 ax 
00000183  68007C                 	push	 07C00H 
00000186  CB                     	retf	 
                                   ;	
                                   ;	    }
                                   ;	
00000187  EB10                  	jmp	short @8@30
00000189                        @8@25:
                                   ;	
                                   ;	    else if (activa != 0x00) {
                                   ;	
00000189  803E000200            	cmp	byte ptr DGROUP:_activa,0
0000018E  7409                  	je	short @8@30
                                   ;	
                                   ;	//    printStr((char *)msg_PartitionError) ;
                                   ;	      printStrMacro(msg_PartitionError) ;
                                   ;	
00000190  686700                 	push	 offset _msg_PartitionError 
00000193  E8DFFE                 	call	 near ptr _printStr 
00000196  59                     	pop	 cx 
                                   ;	
                                   ;	      goto fin ;
                                   ;	
00000197  EB14                  	jmp	short @8@35
00000199                        @8@30:
00000199  FF062002              	inc	word ptr DGROUP:_i
0000019D                        @8@31:
0000019D  833E200204            	cmp	word ptr DGROUP:_i,4
000001A2  7D02                  	jge	@@0
000001A4  EB82                  	jmp	@8@8
000001A6                        @@0:
                                   ;	
                                   ;	    }
                                   ;	  }
                                   ;	
                                   ;	//printStr((char *)msg_NoPartition) ;   /* no hay ninguna particion activa */
                                   ;	  printStrMacro(msg_NoPartition) ;      /* no hay ninguna particion activa */
                                   ;	
000001A6  685500                 	push	 offset _msg_NoPartition 
000001A9  E8C9FE                 	call	 near ptr _printStr 
000001AC  59                     	pop	 cx 
000001AD                        @8@35:
                                   ;	
                                   ;	
                                   ;	fin: ;
                                   ;	  leerTecla() ;
                                   ;	
000001AD  E8F0FE                	call	near ptr _leerTecla
                                   ;	
                                   ;	  reboot() ;
                                   ;	
000001B0  CD19                   	int	 019H 
                                   ;	
                                   ;	
                                   ;	  asm org 0x01FF ;  /* para alinear a multiplo de 16 el tamanio del codigo */
                                   ;	
                                 	org	 001FFH 
                                   ;	
                                   ;	
                                   ;	}
                                   ;	
000001FF                        	ret	
00000200                        _reubicado	endp
00000200                        _TEXT	ends
00000000                        _BSS	segment word public 'BSS'
00000000                        _codigo	label	byte
00000000  000000000000000000    	db	440 dup (?)
000001B8                        _WinDiskSig	label	dword
000001B8  00000000              	db	4 dup (?)
000001BC                        _relleno	label	word
000001BC  0000                  	db	2 dup (?)
000001BE                        _descParticion	label	word
000001BE  000000000000000000    	db	64 dup (?)
000001FE                        _signatura	label	word
000001FE  0000                  	db	2 dup (?)
00000200                        _activa	label	byte
00000200  00                    	db	1 dup (?)
00000201                        _cabezaInicial	label	byte
00000201  00                    	db	1 dup (?)
00000202                        _scInicial	label	word
00000202  0000                  	db	2 dup (?)
00000204                        _tipo	label	byte
00000204  00                    	db	1 dup (?)
00000205                        _cabezaFinal	label	byte
00000205  00                    	db	1 dup (?)
00000206                        _sectorFinal	label	byte
00000206  00                    	db	1 dup (?)
00000207                        _cilindroFinal	label	byte
00000207  00                    	db	1 dup (?)
00000208                        _primerSector	label	dword
00000208  00000000              	db	4 dup (?)
0000020C                        _sectores	label	dword
0000020C  00000000              	db	4 dup (?)
00000210                        _unidadBIOS	label	byte
00000210  00                    	db	1 dup (?)
00000211                        _car	label	byte
00000211  00                    	db	1 dup (?)
00000212                        _dirCarga	label	dword
00000212  00000000              	db	4 dup (?)
00000216                        _origen	label	word
00000216  0000                  	db	2 dup (?)
00000218                        _destinoLejano	label	dword
00000218  00000000              	db	4 dup (?)
0000021C                        _origenDesc	label	word
0000021C  0000                  	db	2 dup (?)
0000021E                        _destinoDesc	label	word
0000021E  0000                  	db	2 dup (?)
00000220                        _i	label	word
00000220  0000                  	db	2 dup (?)
00000222                        _j	label	word
00000222  0000                  	db	2 dup (?)
00000224                        _BSS	ends
00000000                        _DATA	segment word public 'DATA'
00000000                        s@	label	byte
00000000                        _DATA	ends
00000200                        _TEXT	segment byte public 'CODE'
00000200                        _TEXT	ends
                                	public	_codigo
                                	public	_WinDiskSig
                                	public	_relleno
                                	public	_descParticion
                                	public	_signatura
                                	public	_activa
                                	public	_cabezaInicial
                                	public	_scInicial
                                	public	_tipo
                                	public	_cabezaFinal
                                	public	_sectorFinal
                                	public	_cilindroFinal
                                	public	_primerSector
                                	public	_sectores
                                	public	_unidadBIOS
                                	public	_main
                                	public	_startBin
                                	public	_printCar
                                	public	_car
                                	public	_printStr
                                	public	_leerTecla
                                	public	_resetController
                                	public	_dirCarga
                                	public	_leerPrimerSectorF
                                	public	_reubicado
                                	public	_origen
                                	public	_destinoLejano
                                	public	_origenDesc
                                	public	_destinoDesc
                                	public	_i
                                	public	_j
                                	end


Macros:

                N a m e                 Type

$comm  . . . . . . . . . . . . .        Proc
@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

$$SYMBOLS  . . . . . . . . . . .        32 Bit   0000043D Byte    Private 'DEBSYM'
$$TYPES  . . . . . . . . . . . .        32 Bit   00000004 Byte    Private 'DEBTYP'
_TEXT  . . . . . . . . . . . . .        16 Bit   0200     Byte    Public  'CODE'
DGROUP . . . . . . . . . . . . .        GROUP
_DATA  . . . . . . . . . . . . .        16 Bit   0000     Word    Public  'DATA'
_BSS . . . . . . . . . . . . . .        16 Bit   0224     Word    Public  'BSS'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

_leerPrimerSectorF . . . . . . .        P Near   00B2     _TEXT    001B Public   
_leerTecla . . . . . . . . . . .        P Near   00A0     _TEXT    0005 Public   
_main  . . . . . . . . . . . . .        P Near   00CD     _TEXT    003F Public   
_msg . . . . . . . . . . . . . .        P Near   0020     _TEXT    001A Public   
_msg_Load  . . . . . . . . . . .        P Near   003A     _TEXT    0014 Public   
_msg_NoPartition . . . . . . . .        P Near   0055     _TEXT    0012 Public   
_msg_PartitionError  . . . . . .        P Near   0067     _TEXT    000E Public   
_msg_ReadError . . . . . . . . .        P Near   004E     _TEXT    0007 Public   
_printCar  . . . . . . . . . . .        P Near   0012     _TEXT    000E Public   
_printStr  . . . . . . . . . . .        P Near   0075     _TEXT    002B Public   
_resetController . . . . . . . .        P Near   00A5     _TEXT    000D Public   
_reubicado . . . . . . . . . . .        P Near   010C     _TEXT    00F4 Public   
_startBin  . . . . . . . . . . .        P Near   0000     _TEXT    0012 Public   


Symbols:

                N a m e                 Type       Value     Attr

??version  . . . . . . . . . . .        Text   0504
?debug . . . . . . . . . . . . .        Text   ;
@3@2 . . . . . . . . . . . . . .        L Near            7Ah _TEXT 
@3@4 . . . . . . . . . . . . . .        L Near            87h _TEXT 
@3@5 . . . . . . . . . . . . . .        L Near            8Fh _TEXT 
@5@4 . . . . . . . . . . . . . .        L Near            AEh _TEXT 
@6@8 . . . . . . . . . . . . . .        L Near            C9h _TEXT 
@7@1 . . . . . . . . . . . . . .        L Near            E5h _TEXT 
@7@3 . . . . . . . . . . . . . .        L Near            FEh _TEXT 
@8@11  . . . . . . . . . . . . .        L Near           14Eh _TEXT 
@8@21  . . . . . . . . . . . . .        L Near           182h _TEXT 
@8@25  . . . . . . . . . . . . .        L Near           189h _TEXT 
@8@30  . . . . . . . . . . . . .        L Near           199h _TEXT 
@8@31  . . . . . . . . . . . . .        L Near           19Dh _TEXT 
@8@35  . . . . . . . . . . . . .        L Near           1ADh _TEXT 
@8@8 . . . . . . . . . . . . . .        L Near           128h _TEXT 
@8@9 . . . . . . . . . . . . . .        L Near           136h _TEXT 
@@0  . . . . . . . . . . . . . .        L Near           1A6h _TEXT 
_WinDiskSig  . . . . . . . . . .        DWord            1B8h _BSS Public 
_activa  . . . . . . . . . . . .        Byte             200h _BSS Public 
_cabezaFinal . . . . . . . . . .        Byte             205h _BSS Public 
_cabezaInicial . . . . . . . . .        Byte             201h _BSS Public 
_car . . . . . . . . . . . . . .        Byte             211h _BSS Public 
_cilindroFinal . . . . . . . . .        Byte             207h _BSS Public 
_codigo  . . . . . . . . . . . .        Byte               0h _BSS Public 
_descParticion . . . . . . . . .        Word             1BEh _BSS Public 
_destinoDesc . . . . . . . . . .        Word             21Eh _BSS Public 
_destinoLejano . . . . . . . . .        DWord            218h _BSS Public 
_dirCarga  . . . . . . . . . . .        DWord            212h _BSS Public 
_i . . . . . . . . . . . . . . .        Word             220h _BSS Public 
_j . . . . . . . . . . . . . . .        Word             222h _BSS Public 
_origen  . . . . . . . . . . . .        Word             216h _BSS Public 
_origenDesc  . . . . . . . . . .        Word             21Ch _BSS Public 
_primerSector  . . . . . . . . .        DWord            208h _BSS Public 
_relleno . . . . . . . . . . . .        Word             1BCh _BSS Public 
_scInicial . . . . . . . . . . .        Word             202h _BSS Public 
_sectorFinal . . . . . . . . . .        Byte             206h _BSS Public 
_sectores  . . . . . . . . . . .        DWord            20Ch _BSS Public 
_signatura . . . . . . . . . . .        Word             1FEh _BSS Public 
_tipo  . . . . . . . . . . . . .        Byte             204h _BSS Public 
_unidadBIOS  . . . . . . . . . .        Byte             210h _BSS Public 
b@ . . . . . . . . . . . . . . .        Byte               0h _BSS 
b@w  . . . . . . . . . . . . . .        Word               0h _BSS 
d@ . . . . . . . . . . . . . . .        Byte               0h _DATA 
d@w  . . . . . . . . . . . . . .        Word               0h _DATA 
s@ . . . . . . . . . . . . . . .        Byte               0h _DATA 

mbr.asm: 657 lines, 3 passes, 0 ms, 0 warnings, 0 errors
