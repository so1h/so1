JWasm v2.12pre, Nov 27 2013
pbrfat16.asm
                                	.286
                                	ifndef	??version
                                	else
                                $comm	macro	name,dist,size,count
 >                              	comm	dist name[size]:BYTE:count
 >                              	endm
                                	endif
00000000                        _TEXT	segment byte public 'CODE'
                                _TEXT	ends
                                DGROUP	group	_DATA,_BSS
                                	assume	cs:_TEXT,ds:DGROUP
00000000                        _DATA	segment word public 'DATA'
00000000                        d@	label	byte
00000000                        d@w	label	word
00000000                        _DATA	ends
00000000                        _BSS	segment word public 'BSS'
00000000                        b@	label	byte
00000000                        b@w	label	word
00000000                        _BSS	ends
00000000                        _DATA	segment word public 'DATA'
00000000                         	_DATA	 ENDS 
00000000                         	_TEXT	 SEGMENT BYTE PUBLIC 'CODE' 
                                 	ASSUME	 CS:_TEXT,DS:DGROUP 
00000000                         	_startBin	 PROC NEAR 
00000000  EB3C                   	jmp	 short _bootCode 
00000002  90                     	nop	 
                                 	org	 0003EH 
                                 	;	 
0000003E                         	_startBin	 ENDP 
0000003E                         	_TEXT	 ENDS 
                                 	public	 _startBin 
00000000                         	_DATA	 SEGMENT WORD PUBLIC 'DATA' 
00000000                        _DATA	ends
0000003E                        _TEXT	segment byte public 'CODE'
                                	assume	cs:_TEXT,ds:DGROUP
0000003E                        _bootCode	proc	near
                                   ;	
                                   ;	void bootCode ( void ) {                  /* recibe el cotrol desde el BPB */
                                   ;	
                                   ;	
                                   ;	  asm {
                                   ;	//  cli ;        /* inhibimos las interrupciones (se suponen ya inhibidas) */
                                   ;	    mov sp,0x9000 ;              /* establecemos la pila SS:SP = 9000:9000 */
                                   ;	
0000003E  BC0090                	mov	 sp,09000H 
                                   ;	
                                   ;	    mov ss,sp ;                                         /* por simplicidad */
                                   ;	
00000041  8ED4                  	mov	 ss,sp 
                                   ;	
                                   ;	//  mov bp,sp ;                                       /* SS:BP = 9000:9000 */
                                   ;	//  sti ;                   /* permitimos las interrupciones (innecesario) */
                                   ;	
                                   ;	#if (CARGA7C00)
                                   ;	    mov ax,7c00h SHR 4 ;                                            /* 7C0 */
                                   ;	
00000043  B8C007                	mov	 ax,7c00h SHR 4 
                                   ;	
                                   ;	#else              /* funciona con carga del sector en cualquier paragrafo */
                                   ;	                     /* lo que es util para depurar PBRFAT16.EXE con el TD */
                                   ;	             /* Se presupone IP alineado a paragrafo: IP & 0x000F = 0x0000 */
                                   ;	    call $+3 ;                         /* apilamos la direcciÃ³n de retorno */
                                   ;	    pop bx ;                           /* BX = IP de pop bx                */
                                   ;	    sub bx,$-1 ;                       /* BX = IP donde se cargo el sector */
                                   ;	    shr bx,4 ;
                                   ;	    mov ax,cs ;
                                   ;	    add ax,bx ;            /* AX:0000 = direccion donde se cargo el sector */
                                   ;	#endif
                                   ;	    mov ds,ax ;
                                   ;	
00000046  8ED8                  	mov	 ds,ax 
                                   ;	
                                   ;	    push ax ;
                                   ;	
00000048  50                    	push	 ax 
                                   ;	
                                   ;	#if defined(JWASM) || defined(TASM32)
                                   ;	    push OFFSET main ;                                /* retornamos a main */
                                   ;	
00000049  681A01                	push	 OFFSET _main 
                                   ;	
                                   ;	#else
                                   ;	    mov ax,OFFSET main ;
                                   ;	    push ax ;
                                   ;	#endif
                                   ;	    retf ;                                 /* retorno lejano (a 07C0:main) */
                                   ;	
0000004C  CB                    	retf	 
                                   ;	
                                   ;	  }                                             /* estableciendo CS a 07C0 */
                                   ;	}
                                   ;	
0000004D                        	ret	
0000004E                        _bootCode	endp
                                	assume	cs:_TEXT,ds:DGROUP
0000004E                        _printCar	proc	near
                                   ;	
                                   ;	void printCar ( char car ) {
                                   ;	
0000004E  55                    	push	bp
0000004F  8BEC                  	mov	bp,sp
                                   ;	
                                   ;	  asm {
                                   ;	    mov al,car           /* car -> caracter a escribir                     */
                                   ;	
00000051  8A4604                	mov	 al,[bp+4]           
                                   ;	
                                   ;	    mov ah,0eH           /* 0eH -> escribir caracter                       */
                                   ;	
00000054  B40E                  	mov	 ah,0eH           
                                   ;	
                                   ;	    int 10H              /* 10H -> servicios BIOS de manejo de la pantalla */
                                   ;	
00000056  CD10                  	int	 10H              
                                   ;	
                                   ;	  }
                                   ;	}
                                   ;	
00000058  5D                    	pop	bp
00000059                        	ret	
0000005A                        _printCar	endp
                                	assume	cs:_TEXT,ds:DGROUP
0000005A                        _printStr	proc	near
                                   ;	
                                   ;	void printStr ( char * str ) {
                                   ;	
0000005A  C8020000              	enter	2,0
0000005E  EB14                  	jmp	short @3@5
00000060                        @3@2:
                                   ;	
                                   ;	  char car ;
                                   ;	  while ((car = *str++) != (char)0) {
                                   ;	    if (car == '\n') printCar('\r') ;
                                   ;	
00000060  807EFF0A              	cmp	byte ptr [bp-1],10
00000064  7506                  	jne	short @3@4
00000066  6A0D                  	push	13
00000068  E8E3FF                	call	near ptr _printCar
0000006B  59                    	pop	cx
0000006C                        @3@4:
                                   ;	
                                   ;	    printCar(car) ;
                                   ;	
0000006C  8A46FF                	mov	al,byte ptr [bp-1]
0000006F  50                    	push	ax
00000070  E8DBFF                	call	near ptr _printCar
00000073  59                    	pop	cx
00000074                        @3@5:
00000074  8B5E04                	mov	bx,word ptr [bp+4]
00000077  FF4604                	inc	word ptr [bp+4]
0000007A  8A07                  	mov	al,byte ptr [bx]
0000007C  8846FF                	mov	byte ptr [bp-1],al
0000007F  0AC0                  	or	al,al
00000081  75DD                  	jne	short @3@2
                                   ;	
                                   ;	  }
                                   ;	}
                                   ;	
00000083  C9                    	leave	
00000084                        	ret	
00000085                        _printStr	endp
                                	assume	cs:_TEXT,ds:DGROUP
00000085                        _leerTecla	proc	near
                                   ;	
                                   ;	char leerTecla ( void ) {
                                   ;	
                                   ;	
                                   ;	//char car ;
                                   ;	  asm {
                                   ;	    mov ah,00H                  /* 00H -> leer siguiente tecla pulsada     */
                                   ;	
00000085  B400                  	mov	 ah,00H                  
                                   ;	
                                   ;	    int 16H                     /* 16H -> servicios BIOS de teclado        */
                                   ;	
00000087  CD16                  	int	 16H                     
                                   ;	
                                   ;	//  mov car,al                  /* El caracter ascii se nos devuelve en AL */
                                   ;	  }
                                   ;	//return(car) ;
                                   ;	  return(_AL) ;
                                   ;	
                                   ;	
                                   ;	}
                                   ;	
00000089                        	ret	
0000008A                        _leerTecla	endp
                                	assume	cs:_TEXT,ds:DGROUP
0000008A                        _bloqueDeParametros	proc	near
                                   ;	
                                   ;	void bloqueDeParametros ( void ) {
                                   ;	
                                   ;	
                                   ;	  asm {
                                   ;	//  dw tamBDP ;
                                   ;	    dw 16 ;                                                      /* tamBDP */
                                   ;	
0000008A  1000                  	dw	 16 
                                   ;	
                                   ;	    dw 1 ;
                                   ;	
0000008C  0100                  	dw	 1 
                                   ;	
                                   ;	    dw 0x0000, 0x07C0 ;
                                   ;	
0000008E  0000C007              	dw	 00000H, 007C0H 
                                   ;	
                                   ;	    dd 0x00000000, 0x00000000 ;
                                   ;	
00000092  0000000000000000      	dd	 000000000H, 000000000H 
                                   ;	
                                   ;	  }
                                   ;	}
                                   ;	
0000009A                        	ret	
0000009B                        _bloqueDeParametros	endp
                                	assume	cs:_TEXT,ds:DGROUP
0000009B                        _leerSectorLBA	proc	near
                                   ;	
                                   ;	int leerSectorLBA ( dword_t sectorLogico,
                                   ;	
0000009B  55                    	push	bp
0000009C  8BEC                  	mov	bp,sp
0000009E  56                    	push	si
0000009F  57                    	push	di
                                   ;	
                                   ;	//                  byte_t unidad,
                                   ;	                    pointer_t dir ) {
                                   ;	
                                   ;	//word_t inicioBDP = (word_t)&bloqueDeParametros ;
                                   ;	//word_t finBDP = (word_t)&bloqueDeParametros + tamBDP ;
                                   ;	
                                   ;	//bloqueDeParametros.tam = tamBDP ;       /* sizeof(bloqueDeParamnetros_t) */
                                   ;	//bloqueDeParametros.numSectores = 1 ;
                                   ;	  ((bloqueDeParametros_t *)&bloqueDeParametros)->dir = dir ;  /* cambia DL */
                                   ;	
000000A0  8B560A                	mov	dx,word ptr [bp+10]
000000A3  8B4608                	mov	ax,word ptr [bp+8]
000000A6  2E89169000            	mov	word ptr cs:_bloqueDeParametros+6,dx
000000AB  2EA38E00              	mov	word ptr cs:_bloqueDeParametros+4,ax
                                   ;	
                                   ;	  ((bloqueDeParametros_t *)&bloqueDeParametros)->sectorLogicoL = sectorLogico ;
                                   ;	
000000AF  8B5606                	mov	dx,word ptr [bp+6]
000000B2  8B4604                	mov	ax,word ptr [bp+4]
000000B5  2E89169400            	mov	word ptr cs:_bloqueDeParametros+10,dx
000000BA  2EA39200              	mov	word ptr cs:_bloqueDeParametros+8,ax
                                   ;	
                                   ;	//bloqueDeParametros.sectorLogicoH = 0x00000000L ;
                                   ;	
                                   ;	  asm {
                                   ;	//  mov si,inicioBDP ;
                                   ;	    mov si,OFFSET bloqueDeParametros ;
                                   ;	
000000BE  BE8A00                	mov	 si,OFFSET _bloqueDeParametros 
                                   ;	
                                   ;	//  mov di,finBDP ;
                                   ;	    mov di,si ;
                                   ;	
000000C1  8BFE                  	mov	 di,si 
                                   ;	
                                   ;	    add di,16 ;
                                   ;	
000000C3  83C710                	add	 di,16 
                                   ;	
                                   ;	//  mov dl,unidad ;
                                   ;	    mov dl,C_unidad ;
                                   ;	
000000C6  B280                  	mov	 dl,080H 
                                   ;	
                                   ;	    mov al,1 ;
                                   ;	
000000C8  B001                  	mov	 al,1 
                                   ;	
                                   ;	    mov ah,42h ;        /* 42H -> EXTENDED READ                            */
                                   ;	
000000CA  B442                  	mov	 ah,42h 
                                   ;	
                                   ;	    int 13h ;           /* http://hdebruijn.soo.dto.tudelft.nl/newpage/interupt/out-0700.htm#0651 */
                                   ;	
000000CC  CD13                  	int	 13h 
                                   ;	
                                   ;	    jc errorAlLeer ;    /* el flag de acarreo C se activa en caso de error */
                                   ;	
000000CE  7204                  	jc	short @6@11
                                   ;	
                                   ;	  }
                                   ;	  return(0) ;
                                   ;	
000000D0  33C0                  	xor	ax,ax
000000D2  EB06                  	jmp	short @6@12
000000D4                        @6@11:
                                   ;	
                                   ;	errorAlLeer:
                                   ;	  return(_AH) ;
                                   ;	
000000D4  8AC4                  	mov	al,ah
000000D6  B400                  	mov	ah,0
000000D8  EB00                  	jmp	short @6@12
000000DA                        @6@12:
                                   ;	
                                   ;	}
                                   ;	
000000DA  5F                    	pop	di
000000DB  5E                    	pop	si
000000DC  5D                    	pop	bp
000000DD                        	ret	
000000DE                        _leerSectorLBA	endp
                                	assume	cs:_TEXT,ds:DGROUP
000000DE                        _incAddr	proc	near
                                   ;	
                                   ;	void incAddr ( address_t * p, word_t i ) {
                                   ;	
000000DE  55                    	push	bp
000000DF  8BEC                  	mov	bp,sp
                                   ;	
                                   ;	  if (i > (0xFFFF - p->offset)) p->segment += 0x1000 ;
                                   ;	
000000E1  8B5E04                	mov	bx,word ptr [bp+4]
000000E4  B8FFFF                	mov	ax,-1
000000E7  2B07                  	sub	ax,word ptr [bx]
000000E9  3B4606                	cmp	ax,word ptr [bp+6]
000000EC  7308                  	jae	short @7@3
000000EE  8B5E04                	mov	bx,word ptr [bp+4]
000000F1  8147020010            	add	word ptr [bx+2],4096
000000F6                        @7@3:
                                   ;	
                                   ;	  p->offset += i ;
                                   ;	
000000F6  8B5E04                	mov	bx,word ptr [bp+4]
000000F9  8B4606                	mov	ax,word ptr [bp+6]
000000FC  0107                  	add	word ptr [bx],ax
                                   ;	
                                   ;	}
                                   ;	
000000FE  5D                    	pop	bp
000000FF                        	ret	
00000100                        _incAddr	endp
00000100                        _TEXT	ends
00000000                        _DATA	segment word public 'DATA'
00000000                         	_DATA	 ENDS 
00000100                         	_TEXT	 SEGMENT BYTE PUBLIC 'CODE' 
                                 	ASSUME	 CS:_TEXT,DS:DGROUP 
00000100                         	_msg	 PROC NEAR 
00000100  0A0D50425220502E50    	db	 0ah, 0dh, 'PBR P.P.L.R. (C) 2016', 0ah,  0ah,  0h 
0000011A                         	_msg	 ENDP 
0000011A                         	_TEXT	 ENDS 
                                 	public	 _msg 
00000000                         	_DATA	 SEGMENT WORD PUBLIC 'DATA' 
00000000                        _DATA	ends
0000011A                        _TEXT	segment byte public 'CODE'
                                	assume	cs:_TEXT,ds:DGROUP
0000011A                        _main	proc	near
                                   ;	
                                   ;	void main ( void ) {                                            /* CS = DS */
                                   ;	
0000011A  56                    	push	si
0000011B  57                    	push	di
                                   ;	
                                   ;	
                                   ;	  /* La reubicacion del PBR puede hacerse realizando un bucle de copia o   */
                                   ;	  /* volviendo a leer el primer sector del disco en la direccion de        */
                                   ;	  /* de destino. En principio es mas rapido hacer la copia si la CPU es    */
                                   ;	  /* suficientemente rapida, pero en simuladores lentos como emu8086 es    */
                                   ;	  /* mucho mas rapido la lectura del disco simulada que la copia. Otra     */
                                   ;	  /* ventaja de la lectura del disco es que requiere menos cÃ³digo que la   */
                                   ;	  /* copia lejana, lo que es un hecho muy a tener en cuenta.               */
                                   ;	
                                   ;	#if (FALSE)
                                   ;	
                                   ;	  origen = 0x0000 ;                                           /*   DS:0000 */
                                   ;	
                                   ;	  destinoLejano = (pointer_t)MK_FP(0x9000, 0x0000) ;          /* 9000:0000 */
                                   ;	
                                   ;	  for ( i = 0 ; i < tamPBR ; i++ )   /* reubicacion del sector de arranque */
                                   ;	    *destinoLejano++ = *origen++ ;
                                   ;	
                                   ;	/* *destinoLejano++ = *origen++ ; es preferible a la instruccion:          */
                                   ;	/* destinoLejano[i] = origen[i] ; ya que requiere el uso de si (push si)   */
                                   ;	
                                   ;	#endif ;
                                   ;	
                                   ;	  macroCopia(0x0000, 0x9000, 512) ;
                                   ;	
0000011C  BE0000                 	mov	 si,00000H 
0000011F  8BFE                   	mov	 di,si 
00000121  B80090                 	mov	 ax,09000H 
00000124  8EC0                   	mov	 es,ax 
00000126  B90002                 	mov	 cx,512 
00000129  F3A4                   	rep movsb	 
                                   ;	
                                   ;	
                                   ;	#if (FALSE)
                                   ;	  leerSectorLBA(C_primerSector, /* C_unidad, */ (pointer_t)MK_FP(0x9000, 0x0000)) ;
                                   ;	#endif
                                   ;	
                                   ;	  asm {
                                   ;	    push 9000H                 /* Cedemos el control al sector de arranque */
                                   ;	
0000012B  680090                	push	 9000H                 
                                   ;	
                                   ;	                                                              /* reubicado */
                                   ;	#if defined(JWASM) || defined(TASM32)
                                   ;	    push OFFSET reubicado
                                   ;	
0000012E  683501                	push	 OFFSET _reubicado
                                   ;	
                                   ;	#else
                                   ;	    mov ax,OFFSET reubicado
                                   ;	    push ax
                                   ;	#endif
                                   ;	    retf
                                   ;	
00000131  CB                    	retf	
                                   ;	
                                   ;	  }
                                   ;	
                                   ;	}
                                   ;	
00000132  5F                    	pop	di
00000133  5E                    	pop	si
00000134                        	ret	
00000135                        _main	endp
                                	assume	cs:_TEXT,ds:DGROUP
00000135                        _reubicado	proc	near
                                   ;	
                                   ;	void reubicado ( void ) {
                                   ;	
                                   ;	
                                   ;	
                                   ;	  asm {                   /* establecemos el segmento de datos DS igual CS */
                                   ;	    push cs ;
                                   ;	
00000135  0E                    	push	 cs 
                                   ;	
                                   ;	    pop ds ;
                                   ;	
00000136  1F                    	pop	 ds 
                                   ;	
                                   ;	  }
                                   ;	
                                   ;	//asm mov unidadBIOS,dl ;             /* el BIOS puso el numero de la unidad */
                                   ;	                                    /* de la que arranca en el registro DL */
                                   ;	//if (unidadBIOS != bpb.unidad) {
                                   ;	//if (C_unidad != bpb.unidad) {
                                   ;	#if (TRUE)
                                   ;	  if (_DL != bpb.unidad) {
                                   ;	
00000137  3A162400              	cmp	dl,byte ptr DGROUP:_bpb+36
0000013B  740B                  	je	short @9@5
                                   ;	
                                   ;	    printCar('E') ;
                                   ;	
0000013D  6A45                  	push	69
0000013F  E80CFF                	call	near ptr _printCar
00000142  59                    	pop	cx
                                   ;	
                                   ;	    leerTecla() ;
                                   ;	
00000143  E83FFF                	call	near ptr _leerTecla
                                   ;	
                                   ;	    rebootBIOS() ;
                                   ;	
00000146  CD19                   	int	 19h 
00000148                        @9@5:
                                   ;	
                                   ;	  }
                                   ;	#endif
                                   ;	
                                   ;	//resetController() ;              /* se supone ya hecho por parte del MBR */
                                   ;	
                                   ;	              /* Cargar el S.O. a partir de la direcciÃ³n 0600H escribiendo */
                                   ;	              /* un punto tras la lectura de cada sector                   */
                                   ;	
                                   ;	  entrada = (entrada_t far *)MK_FP(0x9000, 0x0300) ;           /* ojo: BSS */
                                   ;	
00000148  C70606020090          	mov	word ptr DGROUP:_entrada+2,-28672
0000014E  C70604020003          	mov	word ptr DGROUP:_entrada,768
                                   ;	
                                   ;	
                                   ;	  ptr = (pointer_t)MK_FP(0x0060, 0x0000) ;           /* 0060:0000 = 00600H */
                                   ;	
00000154  C7060A026000          	mov	word ptr DGROUP:_ptr+2,96
0000015A  C70608020000          	mov	word ptr DGROUP:_ptr,0
                                   ;	
                                   ;	
                                   ;	  sectorlogico = C_primerSectorDatos ;           /* primer sector de datos */
                                   ;	
00000160  C7060C025C02          	mov	word ptr DGROUP:_sectorlogico,604
                                   ;	
                                   ;	
                                   ;	  leerSectorLBA(C_primerSectorDirRaiz, /* _DL, */ (pointer_t)entrada) ;
                                   ;	
00000166  FF360602              	push	word ptr DGROUP:_entrada+2
0000016A  FF360402              	push	word ptr DGROUP:_entrada
0000016E  6A00                  	push	0
00000170  683C02                	push	572
00000173  E825FF                	call	near ptr _leerSectorLBA
00000176  83C408                	add	sp,8
                                   ;	
                                   ;	  nsects = (entrada[0].tam.reg.med/2)+1 ;
                                   ;	
00000179  C41E0402              	les	bx,dword ptr DGROUP:_entrada
0000017D  268B471D              	mov	ax,word ptr es:[bx+29]
00000181  D1E8                  	shr	ax,1
00000183  40                    	inc	ax
00000184  A30E02                	mov	word ptr DGROUP:_nsects,ax
                                   ;	
                                   ;	
                                   ;	/* grldr (0.4.4)  funciona, aunque no detecta el fichero de configuracion  */
                                   ;	/*   menu.lst hasta que no se ejecuta el comando: root (fd0). (3 MB Ok).   */
                                   ;	/* grldr (0.4.5c) funciona si cuenta con al menos 35 megas de RAM.         */
                                   ;	/* grldr (0.4.6a) no funciona con BOOT_9 (usar bootlace).                  */
                                   ;	
                                   ;	#if (TRUE)
                                   ;	  printStrMacro(msg) ;
                                   ;	
00000187  680001                 	push	 offset _msg 
0000018A  E8CDFE                 	call	 near ptr _printStr 
0000018D  59                     	pop	 cx 
                                   ;	
                                   ;	#else
                                   ;	  printStr((char *)msg) ;
                                   ;	#endif
                                   ;	
                                   ;	  for ( i = 0 ; i < nsects ; i++ ) {
                                   ;	
0000018E  C70602020000          	mov	word ptr DGROUP:_i,0
00000194  EB2E                  	jmp	short @9@12
00000196                        @9@10:
                                   ;	
                                   ;	    leerSectorLBA(sectorlogico++, /* C_unidad, */ ptr) ;    /* unidad 0x80 */
                                   ;	
00000196  FF360A02              	push	word ptr DGROUP:_ptr+2
0000019A  FF360802              	push	word ptr DGROUP:_ptr
0000019E  A10C02                	mov	ax,word ptr DGROUP:_sectorlogico
000001A1  FF060C02              	inc	word ptr DGROUP:_sectorlogico
000001A5  6A00                  	push	0
000001A7  50                    	push	ax
000001A8  E8F0FE                	call	near ptr _leerSectorLBA
000001AB  83C408                	add	sp,8
                                   ;	
                                   ;	    printCar('.') ;
                                   ;	
000001AE  6A2E                  	push	46
000001B0  E89BFE                	call	near ptr _printCar
000001B3  59                    	pop	cx
                                   ;	
                                   ;	    incAddr((address_t *)&ptr, C_bytesPorSector) ;
                                   ;	
000001B4  680002                	push	512
000001B7  680802                	push	offset DGROUP:_ptr
000001BA  E821FF                	call	near ptr _incAddr
000001BD  83C404                	add	sp,4
000001C0  FF060202              	inc	word ptr DGROUP:_i
000001C4                        @9@12:
000001C4  A10202                	mov	ax,word ptr DGROUP:_i
000001C7  3B060E02              	cmp	ax,word ptr DGROUP:_nsects
000001CB  72C9                  	jb	short @9@10
                                   ;	
                                   ;	  }
                                   ;	
                                   ;	  asm {
                                   ;	//  mov dl,unidadBIOS ; /* Transmitimos el numero de la unidad de arranque */
                                   ;	    mov dl,C_unidad ;   /* Transmitimos el numero de la unidad de arranque */
                                   ;	
000001CD  B280                  	mov	 dl,080H 
                                   ;	
                                   ;	    push 0060H ;      /* Cedemos el control al S.O. en 0060:0000 = 000600H */
                                   ;	
000001CF  6A60                  	push	 0060H 
                                   ;	
                                   ;	    push 0000H ;
                                   ;	
000001D1  6A00                  	push	 0000H 
                                   ;	
                                   ;	    retf ;
                                   ;	
000001D3  CB                    	retf	 
                                   ;	
                                   ;	  }
                                   ;	
                                   ;	  asm org 0x1FF ;
                                   ;	
                                 	org	 01FFH 
                                   ;	
                                   ;	
                                   ;	}
                                   ;	
000001FF                        	ret	
00000200                        _reubicado	endp
00000200                        _TEXT	ends
00000000                        _BSS	segment word public 'BSS'
00000000                        _bpb	label	word
00000000  000000000000000000    	db	62 dup (?)
0000003E                        _codigo	label	byte
0000003E  000000000000000000    	db	448 dup (?)
000001FE                        _signaturaPBR	label	byte
000001FE  0000                  	db	2 dup (?)
00000200                        _error	label	byte
00000200  00                    	db	1 dup (?)
00000201  00                    	db	1 dup (?)
00000202                        _i	label	word
00000202  0000                  	db	2 dup (?)
00000204                        _entrada	label	dword
00000204  00000000              	db	4 dup (?)
00000208                        _ptr	label	dword
00000208  00000000              	db	4 dup (?)
0000020C                        _sectorlogico	label	word
0000020C  0000                  	db	2 dup (?)
0000020E                        _nsects	label	word
0000020E  0000                  	db	2 dup (?)
00000210                        _BSS	ends
00000000                        _DATA	segment word public 'DATA'
00000000                        s@	label	byte
00000000                        _DATA	ends
00000200                        _TEXT	segment byte public 'CODE'
00000200                        _TEXT	ends
                                	public	_bootCode
                                	public	_bpb
                                	public	_codigo
                                	public	_signaturaPBR
                                	public	_main
                                	public	_printCar
                                	public	_printStr
                                	public	_leerTecla
                                	public	_error
                                	public	_bloqueDeParametros
                                	public	_leerSectorLBA
                                	public	_incAddr
                                	public	_reubicado
                                	public	_i
                                	public	_entrada
                                	public	_ptr
                                	public	_sectorlogico
                                	public	_nsects
                                	end


Macros:

                N a m e                 Type

$comm  . . . . . . . . . . . . .        Proc
@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

$$SYMBOLS  . . . . . . . . . . .        32 Bit   0000026D Byte    Private 'DEBSYM'
$$TYPES  . . . . . . . . . . . .        32 Bit   00000004 Byte    Private 'DEBTYP'
_TEXT  . . . . . . . . . . . . .        16 Bit   0200     Byte    Public  'CODE'
DGROUP . . . . . . . . . . . . .        GROUP
_DATA  . . . . . . . . . . . . .        16 Bit   0000     Word    Public  'DATA'
_BSS . . . . . . . . . . . . . .        16 Bit   0210     Word    Public  'BSS'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

_bloqueDeParametros  . . . . . .        P Near   008A     _TEXT    0011 Public   
_bootCode  . . . . . . . . . . .        P Near   003E     _TEXT    0010 Public   
_incAddr . . . . . . . . . . . .        P Near   00DE     _TEXT    0022 Public   
_leerSectorLBA . . . . . . . . .        P Near   009B     _TEXT    0043 Public   
_leerTecla . . . . . . . . . . .        P Near   0085     _TEXT    0005 Public   
_main  . . . . . . . . . . . . .        P Near   011A     _TEXT    001B Public   
_msg . . . . . . . . . . . . . .        P Near   0100     _TEXT    001A Public   
_printCar  . . . . . . . . . . .        P Near   004E     _TEXT    000C Public   
_printStr  . . . . . . . . . . .        P Near   005A     _TEXT    002B Public   
_reubicado . . . . . . . . . . .        P Near   0135     _TEXT    00CB Public   
_startBin  . . . . . . . . . . .        P Near   0000     _TEXT    003E Public   


Symbols:

                N a m e                 Type       Value     Attr

??version  . . . . . . . . . . .        Text   0504
?debug . . . . . . . . . . . . .        Text   ;
@3@2 . . . . . . . . . . . . . .        L Near            60h _TEXT 
@3@4 . . . . . . . . . . . . . .        L Near            6Ch _TEXT 
@3@5 . . . . . . . . . . . . . .        L Near            74h _TEXT 
@6@11  . . . . . . . . . . . . .        L Near            D4h _TEXT 
@6@12  . . . . . . . . . . . . .        L Near            DAh _TEXT 
@7@3 . . . . . . . . . . . . . .        L Near            F6h _TEXT 
@9@10  . . . . . . . . . . . . .        L Near           196h _TEXT 
@9@12  . . . . . . . . . . . . .        L Near           1C4h _TEXT 
@9@5 . . . . . . . . . . . . . .        L Near           148h _TEXT 
_bpb . . . . . . . . . . . . . .        Word               0h _BSS Public 
_codigo  . . . . . . . . . . . .        Byte              3Eh _BSS Public 
_entrada . . . . . . . . . . . .        DWord            204h _BSS Public 
_error . . . . . . . . . . . . .        Byte             200h _BSS Public 
_i . . . . . . . . . . . . . . .        Word             202h _BSS Public 
_nsects  . . . . . . . . . . . .        Word             20Eh _BSS Public 
_ptr . . . . . . . . . . . . . .        DWord            208h _BSS Public 
_sectorlogico  . . . . . . . . .        Word             20Ch _BSS Public 
_signaturaPBR  . . . . . . . . .        Byte             1FEh _BSS Public 
b@ . . . . . . . . . . . . . . .        Byte               0h _BSS 
b@w  . . . . . . . . . . . . . .        Word               0h _BSS 
d@ . . . . . . . . . . . . . . .        Byte               0h _DATA 
d@w  . . . . . . . . . . . . . .        Word               0h _DATA 
s@ . . . . . . . . . . . . . . .        Byte               0h _DATA 

pbrfat16.asm: 678 lines, 3 passes, 0 ms, 0 warnings, 0 errors
