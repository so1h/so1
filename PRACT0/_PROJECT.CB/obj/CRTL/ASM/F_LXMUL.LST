Turbo Assembler	 Version 5.4	    12-01-17 01:31:19	    Page 1
..\CRTL\ASM\F_LXMUL.ASM



      1				     ;[]-----------------------------------------------------------------[]
      2				     ;|	     F_LXMUL.ASM -- long multiply routine			  |
      3				     ;[]-----------------------------------------------------------------[]
      4
      5				     ;
      6				     ;	     C/C++ Run Time Library - Version 5.0
      7				     ;
      8				     ;	     Copyright (c) 1987, 1992 by Borland International
      9				     ;	     All Rights	Reserved.
     10				     ;
     11
     12				     ;	     INCLUDE RULES.ASI
     13
     14				     ; calls to	this routine are generated by the compiler to perform
     15				     ; long multiplications.
     16
     17				     ; There is	no check for overflow.	Consequently, the same routine
     18				     ; is used for both	signed and unsigned long multiplies.
     19
     20				     ;
     21				     ; in:
     22				     ;	     (dx:ax) - 32bit arg1
     23				     ;	     (cx:bx) - 32bit arg2
     24				     ; out:
     25				     ;	     (dx:ax) - 32bit product
     26				     ;
     27				     ; reg use:	bx,cx destroyed, all others preserved or contain result.
     28				     ;
     29				     ; hi(result) := lo(hi(arg1) * lo(arg2)) +
     30				     ;		     lo(hi(arg2) * lo(arg1)) +
     31				     ;		     hi(lo(arg1) * lo(arg2))
     32				     ; lo(result) := lo(lo(arg1) * lo(arg2))
     33				     ;
     34				     ;
     35	0000			     _TEXT   SEGMENT BYTE PUBLIC 'CODE'
     36					     ASSUME  CS:_TEXT
     37
     38					     public  LXMUL@
     39					     public  F_LXMUL@
     40
     41	0000			     LXMUL@	     PROC    FAR
     42	0000			     F_LXMUL@:
     43	0000  56				     push    si
     44	0001  96				     xchg    si,ax	     ; save lo1
     45	0002  92				     xchg    ax,dx
     46	0003  85 C0				     test    ax,ax	     ; skip mul	if hi1==0
     47	0005  74 02				     jz	     nohi1
     48	0007  F7 E3				     mul     bx		     ; hi1 * lo2
     49
     50	0009			     nohi1:	     ; if we jumped here, ax==0	so the following swap works
     51	0009  E3 05				     jcxz    nohi2	     ; skip mul	if hi2==0
     52	000B  91				     xchg    cx, ax	     ; result <-> hi2
     53	000C  F7 E6				     mul     si		     ; lo1 * hi2
     54	000E  03 C1				     add     ax, cx	     ; ax = hi1*lo2 + hi2*lo1
     55	0010			     nohi2:
     56	0010  96				     xchg    ax,si
     57	0011  F7 E3				     mul     bx		     ; lo1 * lo2
Turbo Assembler	 Version 5.4	    12-01-17 01:31:19	    Page 2
..\CRTL\ASM\F_LXMUL.ASM



     58	0013  03 D6				     add     dx,si	     ; hi order	result += partials
     59	0015  5E				     pop     si
     60	0016  CB				     ret
     61	0017			     LXMUL@	     ENDP
     62	0017			     _TEXT   ENDS
     63					     END
Turbo Assembler	 Version 5.4	    12-01-17 01:31:19	    Page 3
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??date			Text   "12-01-17"
??filename		Text   "F_LXMUL	"
??time			Text   "01:31:19"
??version		Number 0504
@Cpu			Text   0101H
@FileName		Text   F_LXMUL
@WordSize		Text   2			   #35
@curseg			Text   _TEXT			   #35
F_LXMUL@		Near16 _TEXT:0000		   39  #42
LXMUL@			Far16  _TEXT:0000		   38  #41
nohi1			Near16 _TEXT:0009		   47  #50
nohi2			Near16 _TEXT:0010		   51  #55

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

_TEXT			16  0017 Byte	Public	CODE	   #35	36
