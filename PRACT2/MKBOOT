!include "..\..\PRACT0\MKFILE0"

.suffixes: .bs .bs1 .bs0 .bin .exe .obj .asm .c 

.path.bs  = .
.path.bs1 = .
.path.bs0 = .
.path.bin = .
.path.exe = .
.path.obj = .
.path.asm = .
.path.c   = .

all:      $(PROGRAMA).bs
parchea:  $(PROGRAMA).bs
extiende: $(PROGRAMA).bs1
extrae:   $(PROGRAMA).bs0
enlaza:   $(PROGRAMA).bin 
ensambla: $(PROGRAMA).obj 
compila:  $(PROGRAMA).asm 
    
.bs1.bs:
  @echo.
  @copy $(PROGRAMA).bs1 $(PROGRAMA).bs > NUL
  PARCHEAR $(PROGRAMA).bs 510 55 AA

.bs0.bs1:
  @echo.
  EXTRAER $(PROGRAMA).bs0 0 512 $(PROGRAMA).bs1
  
.bin.bs0:
  @echo.
  EXTENDER $(PROGRAMA).bin 512 $(PROGRAMA).bs0 
# lo siguiente es innecesario en la nueva versiÃ³n de EXTENDER
# @attrib -r $(PROGRAMA).bs0 > NUL
   
.obj.bin:
  @echo.
  @copy &&|  
$(OPCIONES_LR) \
$(PROGRAMA).obj
name
| ops.lnk > nul
 $(LINKER) @ops.lnk $(PROGRAMA).bin
# ULINK -Tbi -M -s -e_startBin $(PROGRAMA).obj, $(PROGRAMA).bin
  @if exist ops.lnk erase ops.lnk
  
.asm.obj:
!if $(AS) == TASM32
  @copy &&|
$(AFLAGS) 
| ops.ens > nul
  @copy &&|
, $&.obj, $&.lst
| of.ens > nul
  $(AS) @ops.ens $&.asm @of.ens
  @if exist ops.ens erase ops.ens  
  @if exist of.ens erase of.ens  
!elif $(AS) == JWASM
  $(AS) $(AFLAGS) -Fl $&.asm
!else
!message 
!error la macro AS tiene un valor distinto de TASM32 y de JWASM
!message 
!endif  
  
.c.asm:
  @echo.
  @copy &&|
$(CFLAGS_AS) 
| ops.cmp > nul
  $(CC) @ops.cmp $&.c 
  @if exist ops.cmp erase ops.cmp
  @echo.
 
clean: bs pule
  @if exist PROJECT (@cd PROJECT & @clean.bat > NUL & @cd ..) else echo hola > NUL
   

pule: bs0 bs1 bin exe obj asm lst map err i com TR 
  @if exist *.obj erase *.obj
  @if exist *.bak erase *.bak
  @if exist *.tmp erase *.tmp
  @if exist *.ens erase *.ens
  @if exist *.cmp erase *.cmp
  @if exist *.TR erase *.TR
  @if exist ops.lnk erase ops.lnk
  @if exist TDCONFIG.TD erase TDCONFIG.TD
  @if exist *.ens erase *.ens
  @if exist *.cmp erase *.cmp
  

mbr bs bs0 bs1 bin exe obj asm lst map err i com TR: 
  @if exist $(PROGRAMA).$& erase $(PROGRAMA).$&

build: clean all

help: 
# echo off & color 07 & title help & msg * "Hola"
  @"echo." 
  @"echo    relacion de objetivos disponibles:" 
  @"echo."
  @"echo    make          genera el fichero $(PROGRAMA).bs"
  @"echo    make pule     borra todo salvo $(PROGRAMA).C, MAKEFILE y $(PROGRAMA).bs"
  @"echo    make clean    borra todo salvo $(PROGRAMA).C y MAKEFILE"
  @"echo    make build    borra todo y genera un nuevo fichero $(PROGRAMA).bs"
  @"echo    make imagen   genera una imagen de disquete fd$(PROGRAMA).img
  @"echo    make start    arranca la imagen de disquete fd$(PROGRAMA).img con qemu   
  @"echo    make help     muestra esta ayuda sobre los objetivos disponibles"
  
imagen $(UTMP):\fd$(PROGRAMA).img: $(PROGRAMA).bs
  @echo.
  EXTENDER $(PROGRAMA).bs 1474560 $(UTMP):\fd$(PROGRAMA).img 
  @echo.
  PARCHEAR $(UTMP):\fd$(PROGRAMA).img 16896 -f ..\PROG\PROG.BIN
  
floppy: $(UTMP):\fd$(PROGRAMA).img
  @echo. 
  copy $(UTMP):\fd$(PROGRAMA).img $(UTMP):\FLOPPY_0

start: $(PROGRAMA).bs $(UTMP):\fd$(PROGRAMA).img 
# @start $(UUSB):\Interno\qemu-2.7.0\qemu-system-i386w.exe \
#   -L $(UUSB):\Interno\qemu-2.7.0\Bios \
  @start $(UUSB):\Interno\qemu-2.8.0\qemu-system-i386w.exe \
    -L $(UUSB):\Interno\qemu-2.8.0\Bios \
	-vga std \
    -soundhw es1370,sb16,adlib,pcspk \
    -rtc base=localtime,clock=host \
    -name "qemu" \
    -fda $(UTMP):\fd$(PROGRAMA).img \
    -net nic,model=ne2k_pci -net user \
    -no-acpi -no-hpet -no-reboot \
    -m 128 -boot a 
	
emu8086: 
  start C:\emu8086\emu8086.exe $(UUSB):$(PROGRAMA).BIN  
# start C:\emu8086\emu8086.exe $(UUSB):$(PROGRAMA).EXE  
